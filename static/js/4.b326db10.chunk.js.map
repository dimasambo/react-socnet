{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","id","activeClassName","s","active","className","link","dialog","src","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","addMessage","newMessageBody","compose","dispatch","addMessageAction"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,KAAO,sBAAsB,OAAS,wBAAwB,OAAS,0B,qJCI1MC,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIdE,EAAmB,SAACC,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAIC,KAAKC,MAAMN,OAER,cAACG,EAAD,eAAeE,KAAKC,QAFG,cAAC,IAAD,CAAUC,GAAI,cAHT,GACXC,IAAML,WAUtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,6FCJ9DM,EAZI,SAACJ,GAChB,OACI,cAAC,IAAD,CAASC,GAAI,YAAcD,EAAMK,GAAIC,gBAAiBC,IAAEC,OAAQC,UAAWF,IAAEG,KAA7E,SACI,sBAAKD,UAAWF,IAAEI,OAAlB,UACI,qBACIC,IAAI,wJACPZ,EAAMa,WCDRC,EANC,SAACd,GACb,OACI,qBAAKS,UAAWF,IAAEQ,QAAlB,SAA4Bf,EAAMe,W,iCCIpCC,EAAcC,YAAiB,IAuC/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAbL,SAACnB,GACpB,OACI,uBAAMqB,SAAUrB,EAAMsB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAcH,KAAM,iBAAkBe,YAAa,yBAExG,8BACI,0DAQDC,EAvCC,SAAC7B,GACb,IAAI8B,EAAkB9B,EAAM+B,YAAYC,QACnCC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMR,GAAI6B,EAAE7B,IAAS6B,EAAE7B,OAErD8B,EAAmBnC,EAAM+B,YAAYK,SACpCH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAEhC,OAMlD,OACI,sBAAKI,UAAWF,IAAEyB,QAAlB,UACI,qBAAKvB,UAAWF,IAAE+B,aAAlB,SACKR,IAEL,sBAAKrB,UAAWF,IAAE6B,SAAlB,UACKD,EACD,cAACjB,EAAD,CAAqBG,SAXb,SAACkB,GACjBvC,EAAMwC,WAAWD,EAAOE,0B,yBCEjBC,sBACXvC,aAfkB,SAACV,GACnB,MAAO,CACHsC,YAAatC,EAAMsC,gBAIF,SAACY,GACtB,MAAO,CACHH,WAAY,SAACC,GACTE,EAASC,YAAiBH,SAOlC7C,IAFW8C,CAGbb","file":"static/js/4.b326db10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2r7hN\",\"dialogsItems\":\"Dialogs_dialogsItems__2pkWL\",\"messages\":\"Dialogs_messages__2nGbk\",\"link\":\"Dialogs_link__3-bvt\",\"active\":\"Dialogs_active__1of0z\",\"dialog\":\"Dialogs_dialog__3rnF6\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'login'} />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return(\r\n        <NavLink to={'/dialogs/' + props.id} activeClassName={s.active} className={s.link}>\r\n            <div className={s.dialog}>\r\n                <img\r\n                    src='https://images.unsplash.com/photo-1529665253569-6d01c0eaf7b6?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8cHJvZmlsZXxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&w=1000&q=80' />\r\n                {props.name}\r\n            </div>\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return(\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControl/FormControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\r\n\r\n    let messagesElements = props.dialogsPage.messages\r\n        .map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.addMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength50]} name={\"newMessageBody\"} placeholder={\"Enter your message\"} />\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm);\r\n\r\nexport default Dialogs;","import {addMessageAction} from \"../../Redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageAction(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}